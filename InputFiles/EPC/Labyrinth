type timeDependentPhysicsPackage;

pop      100000; //5000
timeSteps   50;
XSdata   ce;
dataType ce;
timeIncrement 1.E-07;
cycles 5; //10
combing 0;                                        //responseType 1; responseDim space; response (19 -1);  
                                                  //responseType 1; responseDim cells; response 12;
                                                  //responseType 0; responseDim cells; response (2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19);                                                                                      //0.0001
EPC {useEPC 1; fitnessHandling 1; responseType 0; responseDim cells; response (2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19); fittestFactor 0.01; nReproductions 2;}
                                                                               // 3 4 5 6 7 8 9 10 11 12 response (12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30)
outputFormat asciiJSON;
collisionOperator { neutronCE {type neutronCEstd;}}

transportOperator { type transportOperatorDT;
                  }

source {
  type pointSource;
  r (1.0 -1.0 0.0);
  particle neutron;
  E 1.0e-3;
}

tally  {

  flux_time { type collisionClerk;
    map { type multiMap; maps (map1 map2);
    // NB this has to be this order: cells first, then time
    map1 { type cellMap; cells (2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19);}
    map2 { type timeMap; grid lin; min 0.0; max 5E-06; N 50;}
    }
    response (flux); flux {type fluxResponse;}
  }
  }

geometry {
    type geometryStd;
    boundary (1 1 1 1 1 1); //(1 1 1 1 1 1);
    graph {type shrunk;}

    surfaces
    {
      universeBox { id 1; type box; origin (10.0 -10.0 0.0); halfwidth (10.0 10.0 0.01);}

      //Top row
      a { id 3; type box; origin (1.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}
      b { id 4; type box; origin (3.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}
      c { id 5; type box; origin (5.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}
      d { id 6; type box; origin (7.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}
      e { id 7; type box; origin (9.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}
      f { id 8; type box; origin (11.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}
      g { id 9; type box; origin (13.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}
      h { id 10; type box; origin (15.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}
      i { id 11; type box; origin (17.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}
      j { id 12; type box; origin (19.0 -1.0 0.0); halfwidth (1.0 1.0 0.01);}

      //leftTop
      leftTop { id 13; type box; origin (2.0 -3.0 0.0); halfwidth (2.0 1.0 0.01);}

      //LeftMid
      LeftMid { id 14; type box; origin (3.0 -5.0 0.0); halfwidth (3.0 1.0 0.01);}

      //LeftBottom
      LeftBottom { id 15; type box; origin (3.0 -14.0 0.0); halfwidth (3.0 8.0 0.01);}

      //Bottom
      Bottom { id 16; type box; origin (10.0 -14.0 0.0); halfwidth (3.0 8.0 0.01);}

      //RightBottom
      RightBottom { id 17; type box; origin (17.0 -14.0 0.0); halfwidth (3.0 8.0 0.01);}

      //RightMid
      RightMid { id 18; type box; origin (17.0 -5.0 0.0); halfwidth (3.0 1.0 0.01);}

      //RightTop
      RightTop { id 19; type box; origin (18.0 -3.0 0.0); halfwidth (2.0 1.0 0.01);}

    } 

    cells
    {
      Wall { id 2; type simpleCell; surfaces (-1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19); filltype mat; material m2;}

      //Top row
      cellOne { id 3; type simpleCell;  surfaces (-3); filltype mat; material m1;}
      cellTwo { id 4; type simpleCell; surfaces (-4); filltype mat; material m1;}
      cellThree { id 5; type simpleCell; surfaces (-5); filltype mat; material m1;}
      cellFour { id 6; type simpleCell; surfaces (-6); filltype mat; material m1;}
      cellFive { id 7; type simpleCell; surfaces (-7); filltype mat; material m1;}
      cellSix { id 8; type simpleCell; surfaces (-8); filltype mat; material m2;}
      cellSeven { id 9; type simpleCell; surfaces (-9); filltype mat; material m2;}
      cellEight { id 10; type simpleCell; surfaces (-10); filltype mat; material m2;}
      cellNine { id 11; type simpleCell; surfaces (-11); filltype mat; material m2;}
      cellTen { id 12; type simpleCell; surfaces (-12); filltype mat; material m3;}


      //leftTop
      leftTop { id 13; type simpleCell; surfaces (-13); filltype mat; material m1;}

      //LeftMid
      LeftMid { id 14; type simpleCell; surfaces (-14); filltype mat; material m1;}

      //LeftBottom
      LeftBottom { id 15; type simpleCell; surfaces (-15); filltype mat; material m1;}

      //Bottom
      Bottom { id 16; type simpleCell; surfaces (-16); filltype mat; material m1;}

      //RightBottom
      RightBottom { id 17; type simpleCell; surfaces (-17); filltype mat; material m1;}

      //RightMid
      RightMid { id 18; type simpleCell; surfaces (-18); filltype mat; material m1;}

      //RightTop
      RightTop { id 19; type simpleCell; surfaces (-19); filltype mat; material m1;}

    }

    universes
    {

      root{id 1; type rootUniverse; border 1; fill u<2>;}
      geom { id 2; type cellUniverse; cells (2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19);}

    }
}

nuclearData {
  handles {
    ce { type aceNeutronDatabase; aceLibrary $SCONE_ACE;} }
  materials {

    // air
    m1 {
      temp 293;
      composition {
        07014.03  4.1985E-5; //6.6766E-2;
        08016.03  1.1263E-5; //3.3383E-2;
        }
    }

    // Boron
    m2 {
      temp 293;
      composition {
        5010.03   0.05;
        5011.03   0.05;
        }
    }

    // water
    m3 {
      temp 293;
      composition {
        07014.03  6.6766E-2;
        08016.03  3.3383E-2;
        }
    }

}
}
